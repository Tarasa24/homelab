---
- name: Configure backup server
  hosts: lxc_backup
  gather_facts: false

  vars:
    ansible_host: "{{ hostvars[inventory_hostname].ansible_host }}"
    lxc_host: "{{ hostvars[inventory_hostname].lxc_host }}"
    repositories_dir: /backup/repos
    postgres_user: "postgres"
    postgres_data_directory: "/var/lib/postgresql/data"
    postgres_replicator_password: "{{ lookup('password', '../../../secrets/backup/postgres/replicator_password') }}"
    primary_postgres_db_hosts: "{{ groups['private-docker_postgres_dbs'] }}"

  roles:
    - role: lxc_python3

  pre_tasks:
    - name: Find all ".yaml" and ".yml" borgmatic configuration files
      local_action:
        module: find
        paths: "/path/to/your/local/directory"
        patterns: "*.yml,*.yaml"
        file_type: file
      register: borgmatic_configs
    - name: Set the config names as a variable
      ansible.builtin.set_fact:
        repositories: "{{ borgmatic_configs.files | map(attribute='path') | map('basename') | map('regex_replace', '\\.(yml|yaml)$', '') | list }}"
  tasks:
    - name: Install ssh
      ansible.builtin.apk:
        name: openssh
        state: present
    - name: Start sshd
      ansible.builtin.service:
        name: sshd
        state: started
        enabled: true
    - name: Set PubKeyAuthentication
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        line: "PubKeyAuthentication yes"
        state: present
    - name: Set PasswordAuthentication
      ansible.builtin.lineinfile:
        path: /etc/ssh/sshd_config
        line: "PasswordAuthentication no"
        state: present
    - name: Restart sshd
      ansible.builtin.service:
        name: sshd
        state: restarted

    - name: Install restic
      ansible.builtin.apk:
        name: restic
        state: present

    - name: Check if resticprofile is installed
      ansible.builtin.stat:
        path: /usr/local/bin/resticprofile
      register: resticprofile_installed

    - name: Install resticprofile
      block:
        - name: Curl resticprofile
          ansible.builtin.get_url:
            url: https://raw.githubusercontent.com/creativeprojects/resticprofile/master/install.sh
            dest: /tmp/resticprofile.sh
            mode: 'u+x'

        - name: Compile resticprofile
          ansible.builtin.command:
            cmd: /tmp/resticprofile.sh -b /usr/local/bin
            creates: /usr/local/bin/resticprofile
      when: not resticprofile_installed.stat.exists

    - name: Install borg + borgmatic
      ansible.builtin.apk:
        name: [ borgbackup, borgmatic ]
        state: present
    - name: Create backup group
      ansible.builtin.group:
        name: backup
        gid: 1000
        state: present
    - name: Create backup user
      ansible.builtin.user:
        name: backup
        group: backup
        groups:
        shell: /bin/ash
        home: /home/backup
        create_home: yes
        uid: 1000
        password: "{{ lookup('password', '/dev/null length=15 chars=ascii_letters') | password_hash('sha512') }}"
        state: present
    - name: Create backup home directory
      ansible.builtin.file:
        path: /home/backup
        state: directory
        owner: backup
        group: backup
        mode: '0700'
    - name: Create directory for backup repositories
      ansible.builtin.file:
        path: "{{ repositories_dir }}"
        state: directory
        owner: backup
        group: backup
        mode: '0700'
    - name: Create backup ssh directory
      ansible.builtin.file:
        path: /home/backup/.ssh
        state: directory
        owner: backup
        group: backup
        mode: '0700'
    - name: Set authorized_keys
      ansible.builtin.authorized_key:
        user: backup
        key: "{{ lookup('file', '../../../secrets/backup/ssh/id_ed25519.pub') }}"
        key_options: 'command="/usr/bin/borg serve --restrict-to-path {{ repositories_dir }}",restrict'
    - name: Set authrized keys permissions
      ansible.builtin.file:
        path: /home/backup/.ssh/authorized_keys
        owner: backup
        group: backup
        mode: '0600'
        state: file

    - name: Init borg repositories if they don't already exist
      ansible.builtin.command:
        cmd: borg init --encryption=none {{ repositories_dir }}/{{ item }}
        creates: "{{ repositories_dir }}/{{ item }}/config"
      become: true
      become_user: backup
      become_method: su
      become_flags: '-s /bin/sh'
      with_items: "{{ repositories }}"

    - name: Install PostgreSQL
      apk:
        name: "postgresql"
        state: present
    - name: Install required pip package for postgres manipulation
      ansible.builtin.pip:
        name: psycopg2-binary
        state: present
    - name: Ensure Postgres data directory exists
      file:
        path: "{{ postgres_data_directory }}"
        state: directory
        owner: "{{ postgres_user }}"
        group: "{{ postgres_user }}"
        mode: '0700'
    - name: Initialize PostgreSQL data directory
      command:
        cmd: "/usr/bin/initdb -D {{ postgres_data_directory }}"
        creates: "{{ postgres_data_directory }}/PG_VERSION"
      become: true
      become_user: "{{ postgres_user }}"
      become_method: su
      become_flags: '-s /bin/sh'
    - name: Ensure PostgreSQL is started and enabled on boot
      service:
        name: postgresql
        enabled: true
        state: started

    - name: Create database for each primary db
      ansible.builtin.postgresql_db:
        name: "{{ hostvars[item].db_name }}" 
        state: present
      with_items: "{{ primary_postgres_db_hosts }}"

    - name: Create subscription for each primary db
      ansible.builtin.postgresql_subscription:
        name: "{{ hostvars[item].db_name }}_subscription"
        publications: "{{ hostvars[item].db_name }}_publication"
        db: "{{ hostvars[item].db_name }}"
        connparams:
          host: "{{ item }}"
          port: 5432
          user: "replicator"
          password: "{{ postgres_replicator_password }}"
          dbname: "{{ hostvars[item].db_name }}"
        subsparams:
          connect: false
        state: present
      with_items: "{{ primary_postgres_db_hosts }}"
